#!/usr/bin/env bash

ARTHERA_RELEASE=0.0.0
ARTHERA_DOWNLOAD_ROOT=https://release.arthera.net

set -e

main() {
  downloader --check
  need_cmd uname
  need_cmd mktemp
  need_cmd chmod
  need_cmd mkdir
  need_cmd rm
  need_cmd sed
  need_cmd grep

  for arg in "$@"; do
    case "$arg" in
    -h | --help)
      usage
      exit 0
      ;;
    *) ;;

    esac
  done

  _ostype="$(uname -s)"
  _cputype="$(uname -m)"

  case "$_ostype" in
  Linux)

    _ostype=unknown-linux-gnu
    ;;
  *)
    err "machine architecture is currently unsupported"
    ;;
  esac

  echo -n "Checking 'arthera' user: "
  if id "arthera" &>/dev/null; then
    echo "no action needed."
  else
    useradd arthera
    echo "added."
  fi

  echo -n "Tuning kernel params: "
  if [ -f "/etc/sysctl.d/99-arthera.conf" ]; then
    echo "not needed"
  else
    cat <<EOF >/etc/sysctl.d/99-arthera.conf
net.core.rmem_max=134217728
net.core.optmem_max=0
net.core.rmem_default=134217728
net.core.wmem_default=134217728
net.core.netdev_max_backlog=0
vm.max_map_count=1000000
net.core.wmem_max=134217728
EOF
    sysctl --system >/dev/null
    echo "done."
  fi

  ensure mkdir -p /home/arthera/bin
  ensure mkdir -p /home/arthera/conf
  ensure mkdir -p /home/arthera/logs
  ensure mkdir -p /home/arthera/data

  echo "Downloading Arthera $ARTHERA_RELEASE binaries"
  binaries=('arthera' 'bootnode' 'abidump' 'abigen')

  for binary in "${binaries[@]}"; do
    printf '.'
    rm -f "/home/arthera/bin/$binary"
    ensure downloader "$ARTHERA_DOWNLOAD_ROOT/$ARTHERA_RELEASE/$binary" "/home/arthera/bin/$binary"
    ensure chmod a+x "/home/arthera/bin/$binary"
  done
  echo "done."

  echo "Generating node key..."
  ensure /home/arthera/bin/bootnode -genkey /home/arthera/conf/node.key

  cat <<EOF >/home/arthera/bin/arthera-env
ARTHERA_VALIDATOR_ID=<YOUR_VALIDATOR_ID>
ARTHERA_VALIDATOR_PUBKEY=<YOUR_VALIDATOR_PUBKEY>
ARTHERA_NODE_IP=<MACHINE_EXTERNAL_IP>
EOF

  cat <<EOF >/home/arthera/bin/start-validator.sh
#!/usr/bin/env bash
set -e
shopt -s nullglob

set -o allexport
if ! \$(source /home/arthera/bin/arthera-env); then
  printf "Plase update your configuration in /home/arthera/bin/arthera-env\n"
  exit 1
else
  source /home/arthera/bin/arthera-env
  NODE_KEY=\$(cat /home/arthera/conf/node.key)
  echo "Your validator configuration:"
  echo "-----------------------------"
  echo "Validator ID: \$ARTHERA_VALIDATOR_ID"
  echo "Validator Public Key: \$ARTHERA_VALIDATOR_PUBKEY"
  echo "Node key: \$NODE_KEY"
fi
set +o allexport

printf "\nStarting node:\n"
echo "-----------------------------"

args=(
  --testnet
  --port 6534
  --nat extip:\$ARTHERA_NODE_IP
  --cache 4000
  --syncmode full
  --nodekey /home/arthera/conf/node.key
  --datadir /home/arthera/data
  --verbosity=3
  --validator.id \$ARTHERA_VALIDATOR_ID
  --validator.pubkey "\$ARTHERA_VALIDATOR_PUBKEY"
  --validator.password /home/arthera/conf/credentials
)

exec /home/arthera/bin/arthera "\${args[@]}" >>/home/arthera/logs/validator.log
EOF
  ensure chmod a+x /home/arthera/bin/start-validator.sh
  ensure chown -R arthera:arthera /home/arthera/bin
  ensure chown -R arthera:arthera /home/arthera/conf
  ensure chown -R arthera:arthera /home/arthera/logs
  ensure chown -R arthera:arthera /home/arthera/data

  echo -n "Creating system services..."
  cat <<EOF >/etc/systemd/system/arthera-validator.service
[Unit]
Description=Arthera Validator
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=arthera
LimitNOFILE=500000
LogRateLimitIntervalSec=0
ExecStart=/home/arthera/bin/start-validator.sh
EnvironmentFile=-/home/arthera/bin/arthera-env.sh

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable arthera-validator

  echo ""
  echo "Please update your validator info in /home/arthera/bin/arthera-env.sh:"
  echo "------------------------------------------------------------------------------------"
  cat /home/arthera/bin/arthera-env
}

err() {
  printf 'Arthera installer: %s\n' "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" >/dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
  if ! "$@"; then
    err "command failed: $*"
  fi
}

# This is just for indicating that commands' results are being
# intentionally ignored. Usually, because it's being executed
# as part of error handling.
ignore() {
  "$@"
}

# This wraps curl or wget. Try curl first, if not installed,
# use wget instead.
downloader() {
  if check_cmd curl; then
    program=curl
  elif check_cmd wget; then
    program=wget
  else
    program='curl or wget' # to be used in error message of need_cmd
  fi

  if [ "$1" = --check ]; then
    need_cmd "$program"
  elif [ "$program" = curl ]; then
    curl -sSfL "$1" -o "$2"
  elif [ "$program" = wget ]; then
    wget "$1" -O "$2"
  else
    err "Unknown downloader" # should not reach here
  fi
}

main "$@"
